{
	"desktop": [
		"# This script is loaded as template,",
		"# feel free to delete it by right-click",
		"# and click select-all :>",
		"",
		"function game_generatorsHandler_newPlayerGenerator(owner: offline player, location: location, level: number, enhanced: boolean = false):",
		"\tset {_generatorLocationText} to game_generatorsHandler_locationToText({_location})",
		"\tset {_generatorLocationPlot} to game_plotsHandler_checkLocationInPlot(game_plotsHandler_newPlotSettings({-game_dataHandler::PLOT_SETTING_ROAD_SIZE}, {-game_dataHandler::PLOT_SETTING_PLOT_SIZE}), {_location})",
		"\tset {_generatorOwnerUUID} to ({_owner}'s UUID)",
		"\tgame_generatorsHandler_generators_generatorData_addData({_generatorOwnerUUID}, {_generatorLocationText}, {_generatorLocationPlot}, {_level}, {_enhanced})",
		"\tgame_generatorsHandler_generators_plotData_addData({_generatorLocationText}, {_generatorLocationPlot})",
		"\tgame_generatorsHandler_generators_playerData_addData({_generatorOwnerUUID}, {_generatorLocationText})",
		"\tif {_owner} is online:",
		"\t\tgame_generatorsHandler_addActiveGenerator({_generatorLocationText})",
		"",
		"function game_generatorsHandler_removePlayerGenerator(generatorLocationText: text):",
		"\tset {_generatorLocationPlot} to stringDatasAPI_getData({game_generatorsHandler_generatorData::%{_generatorLocationText}%}, \"GENERATOR_IN_PLOT\")",
		"\tset {_generatorOwnerUUID} to stringDatasAPI_getData({game_generatorsHandler_generatorData::%{_generatorLocationText}%}, \"GENERATOR_OWNER\")",
		"\tif game_generatorsHandler_isActiveGenerator({_generatorLocationText}) is true:",
		"\t\tgame_generatorsHandler_removeActiveGenerator({_generatorLocationText})",
		"\tgame_generatorsHandler_generators_plotData_removeData({_generatorLocationText}, {_generatorLocationPlot})",
		"\tgame_generatorsHandler_generators_playerData_removeData({_generatorOwnerUUID}, {_generatorLocationText})",
		"\tgame_generatorsHandler_generators_generatorData_removeData({_generatorLocationText})",
		"",
		"function game_generatorsHandler_removePlotGenerator(plotId: text):",
		"\tset {_generatorsInPlotLocationText::*} to game_generatorsHandler_generators_plotData_getPlotGenerators({_plotId})",
		"\tif {_generatorsInPlotLocationText::*} is not set:",
		"\t\tstop",
		"\tloop {_generatorsInPlotLocationText::*}:",
		"\t\tgame_playerControlPanelHandler_panelGUI_editGenerator_playerRemoveGenerator({_null}, {_null}, loop-value)",
		"",
		"function game_generatorsHandler_generators_generatorData_addData(generatorOwnerUUID: text, generatorLocationText: text, generatorLocationPlot: text, generatorLevel: number, generatorEnhanced: boolean):",
		"\tset {_generatorDataRaw} to stringDatasAPI_setData(\"GENERATOR_OWNER\", {_generatorOwnerUUID})",
		"\tset {_generatorDataRaw} to stringDatasAPI_setData(\"GENERATOR_LEVEL\", \"%{_generatorLevel}%\", {_generatorDataRaw})",
		"\tif {_generatorEnhanced} is true:",
		"\t\tset {_generatorDataRaw} to stringDatasAPI_setData(\"GENERATOR_ENHANCED\", \"TRUE\", {_generatorDataRaw})",
		"\tset {_generatorDataRaw} to stringDatasAPI_setData(\"GENERATOR_IN_PLOT\", {_generatorLocationPlot}, {_generatorDataRaw})",
		"\tset {_generatorDataRaw} to stringDatasAPI_setData(\"GENERATOR_PLACED_DATE\", \"%unixAPI_dateToUnix(now)%\", {_generatorDataRaw})",
		"\tset {game_generatorsHandler_generatorData::%{_generatorLocationText}%} to {_generatorDataRaw}",
		"",
		"function game_generatorsHandler_generators_generatorData_removeData(generatorLocationText: text):",
		"\tdelete {game_generatorsHandler_generatorData::%{_generatorLocationText}%}",
		"",
		"function game_generatorsHandler_generators_plotData_addData(generatorLocationText: text, generatorLocationPlot: text):",
		"\tset {_plotGeneratorsAmount} to (stringDatasAPI_getData({game_generatorsHandler_plotData::%{_generatorLocationPlot}%}, \"PLOT_GENERATORS_AMOUNT\") parsed as number)",
		"\tset {_plotGeneratorsList} to stringDatasAPI_getData({game_generatorsHandler_plotData::%{_generatorLocationPlot}%}, \"PLOT_GENERATORS_LIST\")",
		"\tset {_plotGeneratorsAmount} to (check [{_plotGeneratorsAmount} is set] ? {_plotGeneratorsAmount} : 0)",
		"\tset {_plotGeneratorsList} to (check [{_plotGeneratorsList} is set] ? \"%{_plotGeneratorsList}%,\" : \"\")",
		"\tset {_plotDataRaw} to stringDatasAPI_setData(\"PLOT_GENERATORS_AMOUNT\", \"%({_plotGeneratorsAmount} + 1)%\")",
		"\tset {_plotDataRaw} to stringDatasAPI_setData(\"PLOT_GENERATORS_LIST\", \"%{_plotGeneratorsList}%%{_generatorLocationText}%\", {_plotDataRaw})",
		"\tset {game_generatorsHandler_plotData::%{_generatorLocationPlot}%} to {_plotDataRaw}",
		"",
		"function game_generatorsHandler_generators_plotData_removeData(generatorLocationText: text, generatorLocationPlot: text):",
		"\tset {_generatorPlotGeneratorsListAmount} to (stringDatasAPI_getData({game_generatorsHandler_plotData::%{_generatorLocationPlot}%}, \"PLOT_GENERATORS_AMOUNT\") parsed as number)",
		"\tset {_generatorPlotGeneratorsListAmount} to (check [{_generatorPlotGeneratorsListAmount} is set] ? {_generatorPlotGeneratorsListAmount} : 0)",
		"\tset {_generatorPlotGeneratorsListText} to stringDatasAPI_getData({game_generatorsHandler_plotData::%{_generatorLocationPlot}%}, \"PLOT_GENERATORS_LIST\")",
		"\tset {_generatorPlotGeneratorsListSplit::*} to {_generatorPlotGeneratorsListText} split by \",\"",
		"\tloop {_generatorPlotGeneratorsListSplit::*}:",
		"\t\tif loop-value is {_generatorLocationText}:",
		"\t\t\tdelete {_generatorPlotGeneratorsListSplit::%loop-index%}",
		"\tif (amount of {_generatorPlotGeneratorsListSplit::*}) <= 0:",
		"\t\tdelete {game_generatorsHandler_plotData::%{_generatorLocationPlot}%}",
		"\t\tstop",
		"\tset {_generatorPlotNewGeneratorsListText} to join {_generatorPlotGeneratorsListSplit::*} with delimiter \",\"",
		"\tset {game_generatorsHandler_plotData::%{_generatorLocationPlot}%} to stringDatasAPI_setData(\"PLOT_GENERATORS_AMOUNT\", \"%(amount of {_generatorPlotGeneratorsListSplit::*})%\", {game_generatorsHandler_plotData::%{_generatorLocationPlot}%})",
		"\tset {game_generatorsHandler_plotData::%{_generatorLocationPlot}%} to stringDatasAPI_setData(\"PLOT_GENERATORS_LIST\", {_generatorPlotNewGeneratorsListText}, {game_generatorsHandler_plotData::%{_generatorLocationPlot}%})",
		"",
		"function game_generatorsHandler_generators_plotData_getPlotMaximumGeneratorsAmount(generatorLocationPlot: text) :: number:",
		"\tset {_plotActiveMachineStatsGeneratorCapacity} to game_plotStatsHandler_getPlotActiveMachineStat({_generatorLocationPlot}, \"GENERATOR_CAPACITY\", 0)",
		"\treturn ({-game_dataHandler::PLOT_DEFAULT_MAXIMUM_GENERATORS_AMOUNT} + {_plotActiveMachineStatsGeneratorCapacity})",
		"",
		"function game_generatorsHandler_generators_plotData_getPlotGeneratorsAmount(generatorLocationPlot: text) :: number:",
		"\tset {_generatorPlotGeneratorsAmount} to (stringDatasAPI_getData({game_generatorsHandler_plotData::%{_generatorLocationPlot}%}, \"PLOT_GENERATORS_AMOUNT\") parsed as number)",
		"\tif {_generatorPlotGeneratorsAmount} is set:",
		"\t\treturn {_generatorPlotGeneratorsAmount}",
		"\treturn 0",
		"",
		"function game_generatorsHandler_generators_plotData_getPlotGenerators(generatorLocationPlot: text) :: texts:",
		"\tset {_generatorPlotGeneratorsListText} to stringDatasAPI_getData({game_generatorsHandler_plotData::%{_generatorLocationPlot}%}, \"PLOT_GENERATORS_LIST\")",
		"\tset {_generatorPlotGeneratorsListSplit::*} to {_generatorPlotGeneratorsListText} split by \",\"",
		"\treturn {_generatorPlotGeneratorsListSplit::*}",
		"",
		"function game_generatorsHandler_generators_playerData_addData(generatorOwnerUUID: text, generatorLocationText: text):",
		"\tset {_playerOwnedGeneratorsAmount} to (stringDatasAPI_getData({game_generatorsHandler_playerData::%{_generatorOwnerUUID}%}, \"OWNED_GENERATORS_AMOUNT\") parsed as number)",
		"\tset {_playerOwnedGeneratorsList} to stringDatasAPI_getData({game_generatorsHandler_playerData::%{_generatorOwnerUUID}%}, \"OWNED_GENERATORS_LIST\")",
		"\tset {_playerOwnedGeneratorsAmount} to (check [{_playerOwnedGeneratorsAmount} is set] ? {_playerOwnedGeneratorsAmount} : 0)",
		"\tset {_playerOwnedGeneratorsList} to (check [{_playerOwnedGeneratorsList} is set] ? \"%{_playerOwnedGeneratorsList}%,\" : \"\")",
		"\tset {_playerDataRaw} to stringDatasAPI_setData(\"OWNED_GENERATORS_AMOUNT\", \"%({_playerOwnedGeneratorsAmount} + 1)%\")",
		"\tset {_playerDataRaw} to stringDatasAPI_setData(\"OWNED_GENERATORS_LIST\", \"%{_playerOwnedGeneratorsList}%%{_generatorLocationText}%\", {_playerDataRaw})",
		"\tset {game_generatorsHandler_playerData::%{_generatorOwnerUUID}%} to {_playerDataRaw}",
		"",
		"function game_generatorsHandler_generators_playerData_removeData(generatorOwnerUUID: text, generatorLocationText: text):",
		"\tset {_generatorOwnerGeneratorsAmount} to (stringDatasAPI_getData({game_generatorsHandler_playerData::%{_generatorOwnerUUID}%}, \"OWNED_GENERATORS_AMOUNT\") parsed as number)",
		"\tset {_generatorOwnerGeneratorsAmount} to (check [{_generatorOwnerGeneratorsAmount} is set] ? {_generatorOwnerGeneratorsAmount} : 0)",
		"\tif {_generatorOwnerGeneratorsAmount} <= 1:",
		"\t\tset {game_generatorsHandler_playerData::%{_generatorOwnerUUID}%} to stringDatasAPI_removeData({game_generatorsHandler_playerData::%{_generatorOwnerUUID}%}, \"OWNED_GENERATORS_AMOUNT\")",
		"\t\tset {game_generatorsHandler_playerData::%{_generatorOwnerUUID}%} to stringDatasAPI_removeData({game_generatorsHandler_playerData::%{_generatorOwnerUUID}%}, \"OWNED_GENERATORS_LIST\")",
		"\t\tstop",
		"\telse:",
		"\t\tset {game_generatorsHandler_playerData::%{_generatorOwnerUUID}%} to stringDatasAPI_setData(\"OWNED_GENERATORS_AMOUNT\", \"%({_generatorOwnerGeneratorsAmount} - 1)%\", {game_generatorsHandler_playerData::%{_generatorOwnerUUID}%})",
		"\tset {_generatorOwnerGeneratorsListRaw} to stringDatasAPI_getData({game_generatorsHandler_playerData::%{_generatorOwnerUUID}%}, \"OWNED_GENERATORS_LIST\")",
		"\tset {_generatorOwnerGeneratorsList::*} to {_generatorOwnerGeneratorsListRaw} split by \",\"",
		"\tloop {_generatorOwnerGeneratorsList::*}:",
		"\t\tif {_generatorOwnerGeneratorsList::%loop-index%} is {_generatorLocationText}:",
		"\t\t\tdelete {_generatorOwnerGeneratorsList::%loop-index%}",
		"\tset {_generatorOwnerGeneratorsListText} to join {_generatorOwnerGeneratorsList::*} with \",\"",
		"\tset {game_generatorsHandler_playerData::%{_generatorOwnerUUID}%} to stringDatasAPI_setData(\"OWNED_GENERATORS_LIST\", {_generatorOwnerGeneratorsListText}, {game_generatorsHandler_playerData::%{_generatorOwnerUUID}%})",
		"",
		"function game_generatorsHandler_generators_playerData_getPlayerGenerators(generatorOwnerUUID: text) :: texts:",
		"\tset {_playerGeneratorsListText} to stringDatasAPI_getData({game_generatorsHandler_playerData::%{_generatorOwnerUUID}%}, \"OWNED_GENERATORS_LIST\")",
		"\tset {_playerGeneratorsListSplit::*} to {_playerGeneratorsListText} split by \",\"",
		"\treturn {_playerGeneratorsListSplit::*}",
		"",
		"function game_generatorsHandler_getGeneratorItem(generatorLevel: number, enhanced: boolean = false) :: item:",
		"\tset {_enhancedName} to (check [{_enhanced}] ? \"Enhanced \" : \"\")",
		"\tset {_enhancedLore} to (check [{_enhanced}] ? \"||&f||&6&lENHANCED\" : \"\")",
		"\treturn (glowing SPAWNER named \"&e%{_enhancedName}%%{-game_dataHandler::GENERATOR_NAME_%{_generatorLevel}%}%\" with lore \"||&eType: &fGenerator||&eLevel: &f%{_generatorLevel}%%{_enhancedLore}%\")",
		"",
		"function game_generatorsHandler_getGeneratorEnhancerItem(enhanceableLevelMinimum: number, enhanceableLevelMaximum: number) :: item:",
		"\treturn (glowing NETHER_STAR named \"&eGenerator Enhancer\" with lore \"||&eType: &fGenerator Enhancer||&f||&eEnhanceable Level: &f%{_enhanceableLevelMinimum}%~%{_enhanceableLevelMaximum}%\")",
		"",
		"function game_generatorsHandler_getGeneratorLootWorthMultiplier(generatorLocationText: text) :: number:",
		"\tset {_generatorData::*} to game_generatorsHandler_getGeneratorData({_generatorLocationText}, (\"GENERATOR_ENHANCED\" and \"GENERATOR_IN_PLOT\"))",
		"\tset {_generatorLootWorthMultiplier} to 1",
		"\tif {_generatorData::1} is \"TRUE\":",
		"\t\tadd 0.2 to {_generatorLootWorthMultiplier}",
		"\tadd (game_plotStatsHandler_getPlotActiveMachineStat({_generatorData::2}, \"LOOT_WORTH_MULTIPLIER\", 0)) to {_generatorLootWorthMultiplier}",
		"\treturn {_generatorLootWorthMultiplier}",
		"",
		"function game_generatorsHandler_getGeneratorData(generatorLocationText: text, returnDatas: texts) :: texts:",
		"\tloop (amount of {_returnDatas::*}) times:",
		"\t\tset {_loopData} to stringDatasAPI_getData({game_generatorsHandler_generatorData::%{_generatorLocationText}%}, {_returnDatas::%loop-number%})",
		"\t\tset {_loopData} to (check [{_loopData} is set] ? {_loopData} : \"\")",
		"\t\tadd {_loopData} to {_datasRecorded::*}",
		"\t\tdelete {_loopData}",
		"\treturn {_datasRecorded::*}",
		"",
		"function game_generatorsHandler_getItemData(item: item, returnDatas: texts) :: texts:",
		"\tset {_itemLoreSplit::*} to (uncolored {_item}'s lore) split by \"||\"",
		"\tset {_loopDataIndex} to 0",
		"\tloop {_returnDatas::*}:",
		"\t\tadd 1 to {_loopDataIndex}",
		"\t\tloop {_itemLoreSplit::*}:",
		"\t\t\tset {_loopLoreLineSplit::*} to {_itemLoreSplit::%loop-index-2%} split by \": \"",
		"\t\t\tif {_loopLoreLineSplit::1} is {_returnDatas::%loop-index-1%}:",
		"\t\t\t\tif {_loopLoreLineSplit::2} is set:",
		"\t\t\t\t\tadd {_loopLoreLineSplit::2} to {_datasRecorded::*}",
		"\t\t\t\telse:",
		"\t\t\t\t\tadd \"IS_SET\" to {_datasRecorded::*}",
		"\t\tif (amount of {_datasRecorded::*}) < {_loopDataIndex}:",
		"\t\t\tadd \"NONE\" to {_datasRecorded::*}",
		"\treturn {_datasRecorded::*}",
		"",
		"function game_generatorsHandler_getPlayerTotalGeneratorLootWorth(playerUUID: text) :: number:",
		"\tset {_playerTotalGeneratorLootWorth} to 0",
		"\tset {_playerGenerators::*} to game_generatorsHandler_generators_playerData_getPlayerGenerators({_playerUUID})",
		"\tloop {_playerGenerators::*}:",
		"\t\tset {_loopGenerator} to loop-value",
		"\t\tset {_loopGeneratorData::*} to game_generatorsHandler_getGeneratorData({_loopGenerator}, \"GENERATOR_LEVEL\")",
		"\t\tset {_loopGeneratorLevel} to ({_loopGeneratorData::1} parsed as number)",
		"\t\tset {_loopGeneratorLootWorth} to {-game_dataHandler::GENERATOR_LOOT_WORTH_%{_loopGeneratorLevel}%}",
		"\t\tset {_loopGeneratorLootWorthMultiplier} to game_generatorsHandler_getGeneratorLootWorthMultiplier({_loopGenerator})",
		"\t\tset {_loopGeneratorLootWorth} to ceil({-game_dataHandler::GENERATOR_LOOT_WORTH_%{_loopGeneratorLevel}%} * {_loopGeneratorLootWorthMultiplier})",
		"\t\tadd {_loopGeneratorLootWorth} to {_playerTotalGeneratorLootWorth}",
		"\treturn {_playerTotalGeneratorLootWorth}",
		"",
		"function game_generatorsHandler_setGeneratorLevel(generatorLocationText: text, newGeneratorLevel: number):",
		"\tset {_generatorLocation} to game_generatorsHandler_textToLocation({_generatorLocationText})",
		"\tset {game_generatorsHandler_generatorData::%{_generatorLocationText}%} to stringDatasAPI_setData(\"GENERATOR_LEVEL\", \"%{_newGeneratorLevel}%\", {game_generatorsHandler_generatorData::%{_generatorLocationText}%})",
		"\tset block at {_generatorLocation} to {-game_dataHandler::GENERATOR_BLOCK_%{_newGeneratorLevel}%}",
		"\tif {-game_generatorsHandler_generatorActiveLevel::%{_generatorLocationText}%} is set:",
		"\t\tset {-game_generatorsHandler_generatorActiveLevel::%{_generatorLocationText}%} to {_newGeneratorLevel}",
		"",
		"function game_generatorsHandler_setGeneratorEnhanced(generatorLocationText: text, newGeneratorEnhanced: boolean):",
		"\tset {_generatorLocation} to game_generatorsHandler_textToLocation({_generatorLocationText})",
		"\tset {_newGeneratorEnhancedText} to \"%{_newGeneratorEnhanced}%\" in upper case",
		"\tset {game_generatorsHandler_generatorData::%{_generatorLocationText}%} to stringDatasAPI_setData(\"GENERATOR_ENHANCED\", {_newGeneratorEnhancedText}, {game_generatorsHandler_generatorData::%{_generatorLocationText}%})",
		"\tif {-game_generatorsHandler_generatorActiveLevel::%{_generatorLocationText}%} is set:",
		"\t\tset {-game_generatorsHandler_generatorActiveLevel::%{_generatorLocationText}%} to {_newGeneratorLevel}",
		"",
		"function game_generatorsHandler_checkBlockIsGenerator(location: location) :: boolean:",
		"\tset {_locationText} to game_generatorsHandler_locationToText({_location})",
		"\treturn (check [{game_generatorsHandler_generatorData::%{_locationText}%} is set])",
		"",
		"function game_generatorsHandler_locationToText(location: location) :: text:",
		"\tset {_location} to (block at {_location}'s location)",
		"\treturn \"%(({_location}'s x coords) - 0.5)%_%(({_location}'s y coords) - 0.5)%_%(({_location}'s z coords) - 0.5)%_%{_location}'s world%\"",
		"",
		"function game_generatorsHandler_textToLocation(locationText: text) :: location:",
		"\tset {_locationTextSplit::*} to {_locationText} split by \"_\"",
		"\tif (amount of {_locationTextSplit::*}) > 4:",
		"\t\tloop ((amount of {_locationTextSplit::*}) - 4) times:",
		"\t\t\tset \t{_locationTextSplit::4} to \"%{_locationTextSplit::4}%_%{_locationTextSplit::%(4 + loop-number)%}%\"",
		"\tset {_x} to (({_locationTextSplit::1} parsed as number) + 0.5)",
		"\tset {_y} to (({_locationTextSplit::2} parsed as number) + 0.5)",
		"\tset {_z} to (({_locationTextSplit::3} parsed as number) + 0.5)",
		"\tset {_returnLocation} to (location at ({_x}, {_y}, {_z}) in world({_locationTextSplit::4}))",
		"\treturn {_returnLocation}",
		"",
		"function game_generatorsHandler_addActiveGenerator(locationText: text):",
		"\tset {_generatorLocation} to game_generatorsHandler_textToLocation({_locationText})",
		"\tset {-game_generatorsHandler_generatorActiveLocationText::%{_locationText}%} to {_locationText}",
		"\tset {-game_generatorsHandler_generatorActiveLocation::%{_locationText}%} to {_generatorLocation}",
		"\tset {_generatorData::*} to game_generatorsHandler_getGeneratorData({_locationText}, (\"GENERATOR_LEVEL\" and \"GENERATOR_IN_PLOT\"))",
		"\tset {_generatorLevel} to ({_generatorData::1} parsed as number)",
		"\tset {-game_generatorsHandler_generatorActiveLevel::%{_locationText}%} to {_generatorLevel}",
		"\tgame_generatorsHandler_updateActiveGenerator_lootWorthMultiplier({_locationText})",
		"\tspawn a hologram at (location 1.3 meters above {_generatorLocation}) and store in {-game_generatorsHandler_generatorActiveHologram::%{_locationText}%}",
		"\twait 1 tick",
		"\tgame_generatorsHandler_updateActiveGenerator_hologramText({_locationText})",
		"",
		"function game_generatorsHandler_removeActiveGenerator(locationText: text):",
		"\tdelete {-game_generatorsHandler_generatorActiveLocation::%{_locationText}%}",
		"\tdelete {-game_generatorsHandler_generatorActiveLevel::%{_locationText}%}",
		"\tdelete {-game_generatorsHandler_generatorActiveLoot::%{_locationText}%}",
		"\tdelete hologram {-game_generatorsHandler_generatorActiveHologram::%{_locationText}%}",
		"\tdelete {-game_generatorsHandler_generatorActiveHologram::%{_locationText}%}",
		"",
		"function game_generatorsHandler_updateActiveGenerator(locationText: text):",
		"\tgame_generatorsHandler_removeActiveGenerator({_locationText})",
		"\tgame_generatorsHandler_addActiveGenerator({_locationText})",
		"",
		"function game_generatorsHandler_updateActiveGenerator_lootWorthMultiplier(locationText: text):",
		"\tset {_generatorLootWorthMultiplier} to game_generatorsHandler_getGeneratorLootWorthMultiplier({_locationText})",
		"\tset {-game_generatorsHandler_generatorActiveLoot::%{_locationText}%} to game_dataHandler_registerGeneratorDisplay_getGeneratorLoot({-game_generatorsHandler_generatorActiveLevel::%{_locationText}%}, {_generatorLootWorthMultiplier})",
		"",
		"function game_generatorsHandler_updateActiveGenerator_hologramText(locationText: text):",
		"\tset {_generatorData::*} to game_generatorsHandler_getGeneratorData({_locationText}, (\"GENERATOR_LEVEL\" and \"GENERATOR_ENHANCED\"))",
		"\tset {_generatorLevel} to ({_generatorData::1} parsed as number)",
		"\tset {_nextGeneratorLevel} to ({_generatorLevel} + 1)",
		"\tset {_generatorName} to {-game_dataHandler::GENERATOR_NAME_%{_generatorLevel}%}",
		"\tset {_generatorName} to (check [{_generatorData::2} is \"TRUE\"] ? \"&d✯ Enhanced %{_generatorName}% ✯\" : \"&e%{_generatorName}%\")",
		"\tset {_generatorMaxedUpgradeText} to (check [{-game_dataHandler::GENERATOR_NAME_%{_nextGeneratorLevel}%} is not set] ? \"&c\" : \"\")",
		"\tset the lines of {-game_generatorsHandler_generatorActiveHologram::%{_locationText}%} to ({_generatorName} and \"%{_generatorMaxedUpgradeText}%Level %{_generatorLevel}%\")",
		"",
		"function game_generatorsHandler_isActiveGenerator(locationText: text) :: boolean:",
		"\treturn (check [{-game_generatorsHandler_generatorActiveLocation::%{_locationText}%} is set])",
		"",
		"function game_generatorsHandler_updateAllActiveGenerators():",
		"\tgame_dataHandler_resetHolograms()",
		"\tset {_loopCount} to 0",
		"\tloop {-game_generatorsHandler_generatorActiveLocation::*}:",
		"\t\tadd 1 to {_loopCount}",
		"\t\tgame_generatorsHandler_removeActiveGenerator(loop-index)",
		"\t\tif {_loopCount} >= 50:",
		"\t\t\twait 5 ticks",
		"\t\t\tset {_loopCount} to 0",
		"\tloop all players:",
		"\t\tgame_generatorsHandler_updatePlayerActiveGenerators(loop-player, \"ADD_GENERATOR\")",
		"\t\twait 3 ticks",
		"",
		"function game_generatorsHandler_updatePlayerActiveGenerators(player: player, action: text):",
		"\tset {_playerUUID} to ({_player}'s UUID)",
		"\tset {_playerOwnedGeneratorsListRaw} to stringDatasAPI_getData({game_generatorsHandler_playerData::%{_playerUUID}%}, \"OWNED_GENERATORS_LIST\")",
		"\tset {_playerOwnedGeneratorsList::*} to {_playerOwnedGeneratorsListRaw} split by \",\"",
		"\tset {_loopNumber} to 0",
		"\tloop {_playerOwnedGeneratorsList::*}:",
		"\t\tadd 1 to {_loopNumber}",
		"\t\tif {_action} is \"ADD_GENERATOR\":",
		"\t\t\tset {_loopGeneratorData::*} to game_generatorsHandler_getGeneratorData(loop-value, \"GENERATOR_IN_PLOT\")",
		"\t\t\tset {_updateInvolvedPlots::%{_loopGeneratorData::1}%} to true",
		"\t\t\tgame_generatorsHandler_addActiveGenerator(loop-value)",
		"\t\telse if {_action} is \"REMOVE_GENERATOR\":",
		"\t\t\tgame_generatorsHandler_removeActiveGenerator(loop-value)",
		"\t\twait 2 ticks",
		"\tloop {_updateInvolvedPlots::*}:",
		"\t\tgame_plotStatsHandler_updatePlotActiveMachineStats(loop-index, true)",
		"\t\twait 2 ticks",
		"",
		"function game_generatorsHandler_dropLootAll(lootAmount: number = 1):",
		"\tif {-game_eventHandler::GENERATOR_LOOT_SPAWN_QUEUE::*} is set:",
		"\t\tstop",
		"\tset {-game_eventHandler::GENERATOR_LOOT_SPAWN_QUEUE::*} to {-game_generatorsHandler_generatorActiveLocationText::*}",
		"",
		""
	],
	"mobile": [
		"# This script is loaded as template,",
		"# feel free to delete it by right-click",
		"# and click select-all :>",
		"",
		"function game_generatorsHandler_newPlayerGenerator(owner: offline player, location: location, level: number, enhanced: boolean = false):",
		"\tset {_generatorLocationText} to game_generatorsHandler_locationToText({_location})",
		"\tset {_generatorLocationPlot} to game_plotsHandler_checkLocationInPlot(game_plotsHandler_newPlotSettings({-game_dataHandler::PLOT_SETTING_ROAD_SIZE}, {-game_dataHandler::PLOT_SETTING_PLOT_SIZE}), {_location})",
		"\tset {_generatorOwnerUUID} to ({_owner}'s UUID)",
		"\tgame_generatorsHandler_generators_generatorData_addData({_generatorOwnerUUID}, {_generatorLocationText}, {_generatorLocationPlot}, {_level}, {_enhanced})",
		"\tgame_generatorsHandler_generators_plotData_addData({_generatorLocationText}, {_generatorLocationPlot})",
		"\tgame_generatorsHandler_generators_playerData_addData({_generatorOwnerUUID}, {_generatorLocationText})",
		"\tif {_owner} is online:",
		"\t\tgame_generatorsHandler_addActiveGenerator({_generatorLocationText})",
		"",
		"function game_generatorsHandler_removePlayerGenerator(generatorLocationText: text):",
		"\tset {_generatorLocationPlot} to stringDatasAPI_getData({game_generatorsHandler_generatorData::%{_generatorLocationText}%}, \"GENERATOR_IN_PLOT\")",
		"\tset {_generatorOwnerUUID} to stringDatasAPI_getData({game_generatorsHandler_generatorData::%{_generatorLocationText}%}, \"GENERATOR_OWNER\")",
		"\tif game_generatorsHandler_isActiveGenerator({_generatorLocationText}) is true:",
		"\t\tgame_generatorsHandler_removeActiveGenerator({_generatorLocationText})",
		"\tgame_generatorsHandler_generators_plotData_removeData({_generatorLocationText}, {_generatorLocationPlot})",
		"\tgame_generatorsHandler_generators_playerData_removeData({_generatorOwnerUUID}, {_generatorLocationText})",
		"\tgame_generatorsHandler_generators_generatorData_removeData({_generatorLocationText})"
	]
}